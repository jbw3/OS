#ifndef _TYPE_TRAITS
#define _TYPE_TRAITS

namespace std
{

template<typename T>
struct add_const
{
    typedef const T type;
};

template<typename T>
using add_const_t = typename add_const<T>::type;

template<typename T>
struct add_volatile
{
    typedef volatile T type;
};

template<typename T>
using add_volatile_t = typename add_volatile<T>::type;

template<typename T>
struct add_cv
{
    typedef const volatile T type;
};

template<typename T>
using add_cv_t = typename add_cv<T>::type;

template<typename T>
struct remove_const
{
    typedef T type;
};

template<typename T>
struct remove_const<const T>
{
    typedef T type;
};

template<typename T>
using remove_const_t = typename remove_const<T>::type;

template<typename T>
struct remove_volatile
{
    typedef T type;
};

template<typename T>
struct remove_volatile<volatile T>
{
    typedef T type;
};

template<typename T>
using remove_volatile_t = typename remove_volatile<T>::type;

template<typename T>
struct remove_cv
{
    typedef remove_const_t<remove_volatile_t<T>> type;
};

template<typename T>
using remove_cv_t = typename remove_cv<T>::type;

template<typename T, T v>
struct integral_constant
{
    typedef T value_type;
    typedef integral_constant type;

    static constexpr T value = v;

    constexpr operator value_type() const noexcept
    {
        return value;
    }

    constexpr value_type operator ()() const noexcept
    {
        return value;
    }
};

template<bool b>
using bool_constant = integral_constant<bool, b>;

typedef bool_constant<true> true_type;

typedef bool_constant<false> false_type;

template<typename T, typename U>
struct is_same : false_type
{};

template<typename T>
struct is_same<T, T> : true_type
{};

template<typename T, typename U>
inline constexpr bool is_same_v = is_same<T, U>::value;

template<typename T>
struct is_void : is_same<void, remove_cv_t<T>>
{};

template<typename T>
inline constexpr bool is_void_v = is_void<T>::value;

template<typename T>
struct is_null_pointer : is_same<decltype(nullptr), remove_cv_t<T>>
{};

template<typename T>
inline constexpr bool is_null_pointer_v = is_null_pointer<T>::value;

template<typename T>
struct is_integral : bool_constant<
    is_same_v<bool, remove_cv_t<T>> ||
    is_same_v<char, remove_cv_t<T>> ||
    is_same_v<signed char, remove_cv_t<T>> ||
    is_same_v<unsigned char, remove_cv_t<T>> ||
    is_same_v<char16_t, remove_cv_t<T>> ||
    is_same_v<char32_t, remove_cv_t<T>> ||
    is_same_v<wchar_t, remove_cv_t<T>> ||
    is_same_v<short, remove_cv_t<T>> ||
    is_same_v<unsigned short, remove_cv_t<T>> ||
    is_same_v<int, remove_cv_t<T>> ||
    is_same_v<unsigned int, remove_cv_t<T>> ||
    is_same_v<long, remove_cv_t<T>> ||
    is_same_v<unsigned long, remove_cv_t<T>> ||
    is_same_v<long long, remove_cv_t<T>> ||
    is_same_v<unsigned long long, remove_cv_t<T>>
>
{};

template<typename T>
inline constexpr bool is_integral_v = is_integral<T>::value;

template<typename T>
struct is_floating_point : bool_constant<
    is_same_v<float, remove_cv_t<T>> ||
    is_same_v<double, remove_cv_t<T>> ||
    is_same_v<long double, remove_cv_t<T>>
>
{};

template<typename T>
inline constexpr bool is_floating_point_v = is_floating_point<T>::value;

template<typename T>
struct is_arithmetic : bool_constant<
    is_integral_v<T> ||
    is_floating_point_v<T>
>
{};

template<typename T>
inline constexpr bool is_arithmetic_v = is_arithmetic<T>::value;

namespace detail
{
    template<typename T, bool isArithmetic>
    struct is_signed : bool_constant< T(-1) < T(0) >
    {};

    template<typename T>
    struct is_signed<T, false> : bool_constant<false>
    {};
}

template<typename T>
struct is_signed : detail::is_signed<T, is_arithmetic_v<T>>
{};

template<typename T>
inline constexpr bool is_signed_v = is_signed<T>::value;

namespace detail
{
    template<typename T, bool isArithmetic>
    struct is_unsigned : bool_constant< T(0) < T(-1) >
    {};

    template<typename T>
    struct is_unsigned<T, false> : bool_constant<false>
    {};
}

template<typename T>
struct is_unsigned : detail::is_unsigned<T, is_arithmetic_v<T>>
{};

template<typename T>
inline constexpr bool is_unsigned_v = is_unsigned<T>::value;

} // namespace std

#endif // _TYPE_TRAITS
